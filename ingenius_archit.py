# -*- coding: utf-8 -*-
"""InGenius-Archit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/127t6pDqPb2vXEkoCI9AsY_vsshRUtOAc
"""

import nltk
import spacy
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from nltk.corpus import stopwords
import math
import pandas as pd
from collections import Counter
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.model_selection import train_test_split
import webbrowser

def vect_cos(vect, test_list):
    """ Vectorise text and compute the cosine similarity """
    query_0 = vect.transform([' '.join(vect.get_feature_names())])
    query_1 = vect.transform(test_list)
    cos_sim = cosine_similarity(query_0.A, query_1.A)  # displays the resulting matrix
    return query_1, np.round(cos_sim.squeeze(), 3)


data = pd.read_csv ('diseasedataset.csv')
print(data)
data.head()
y=data.Disease
x=data.drop('Disease',axis=1)
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
x_train.head()
x_train.shape
x_test.head()
y_test.head()
#df= pd.DataFrame(data, columns= ['Symptom_1','Symptom_2', 'Symptom_3', "Symptom_4"])
#print(df)

# Train the vectorizer
#symptoms= pd.read_csv("diseasedataset.csv")
#symptoms= ['fever', 'cough', 'cold', 'chills', 'acidity', 'nausea', 'restlessness', 'fatigue', 'rashes', 'headache', 'swelling', 'diarrhoea', 'vomiting', 'breathlessness', 'sweating']
DengueSymptoms= ['rashes', 'chills','vomiting','fatigue', 'headache','fever','nausea']
vectoriser = CountVectorizer().fit(DengueSymptoms)
vectoriser.vocabulary_ # show the word-matrix position pairs



ps= PorterStemmer
text= input("Enter your text: ")
text= text.lower()
stemwords= []

'''symptoms= ['fever', 'cough', 'cold', 'chills', 'acidity', 'nausea', 'restlessness', 'fatigue', 'rashes', 'headache', 'swelling', 'diarrhoea', 'vomiting', 'breathlessness', 'sweating']'''
stop_words = set(stopwords.words('english'))
L=word_tokenize(text)
print(L)
filtered_sentence = [w for w in L if w.isalnum() and not w.lower() in stop_words]
filtered_sentence.sort()
filtered_sentence= list(dict.fromkeys(filtered_sentence))
print(filtered_sentence)



# Analyse filtered_sentence for Dengue
filtered_sentence_vect, filtered_sentence_cos = vect_cos(vectoriser, [' '.join(filtered_sentence)])
print('\nThe cosine similarity for Dengue is {}.'.format(filtered_sentence_cos))
print('The % match is', filtered_sentence_cos*100)

#Analyze filtered_sentence for Typhoid
TyphoidSymptoms= ['chills','vomiting','fatigue','headache','nausea','constipation','diarrhoea']
vectoriser = CountVectorizer().fit(TyphoidSymptoms)
filtered_sentence_vect, filtered_sentence_cos = vect_cos(vectoriser, [' '.join(filtered_sentence)])
print('\nThe cosine similarity for Typhoid is {}.'.format(filtered_sentence_cos))
print('The % match is', filtered_sentence_cos*100)

# Analyze filtered_sentence for Common Cold
CommonColdSymptoms=['sneezing','chills','fatigue','cough','headache','malaise','phlegm','sinus','congestion']
vectoriser = CountVectorizer().fit(CommonColdSymptoms)
filtered_sentence_vect, filtered_sentence_cos = vect_cos(vectoriser, [' '.join(filtered_sentence)])
print('\nThe cosine similarity for Common Cold is {}.'.format(filtered_sentence_cos))
print('The % match is', filtered_sentence_cos*100)

# Analyze filtered_sentence for Pneumonia 
PneumoniaSymptoms=['chills','fatigue','cough','fever','breathlessness','sweating','malaise','phlegm']
vectoriser = CountVectorizer().fit(PneumoniaSymptoms)
filtered_sentence_vect, filtered_sentence_cos = vect_cos(vectoriser, [' '.join(filtered_sentence)])
print('\nThe cosine similarity for Pneumonia is {}.'.format(filtered_sentence_cos))
print('The % match is', filtered_sentence_cos*100)

# Analyze filtered_sentence for Malaria
MalariaSymptoms= ['chills','vomiting','fever','sweating','headache','nausea','diarrhoea']
vectoriser = CountVectorizer().fit(MalariaSymptoms)
filtered_sentence_vect, filtered_sentence_cos = vect_cos(vectoriser, [' '.join(filtered_sentence)])
print('\nThe cosine similarity for Malaria is {}.'.format(filtered_sentence_cos))
print('The % match is', filtered_sentence_cos*100)